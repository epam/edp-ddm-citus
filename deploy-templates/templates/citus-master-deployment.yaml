apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.master.name }}
  labels:
    app: {{ .Values.master.name }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.master.name }}
  replicas: {{ .Values.master.replicas }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        backup.velero.io/backup-volumes: {{ .Values.master.volumes.name }}
        sidecar.istio.io/inject: "false"
      labels:
        app: {{ .Values.master.name }}
    spec:
      initContainers:
        - name: init-chown-data
          image: {{ template "imageRegistry" . -}} {{ .Values.citus.initContainer.image }}
          command:
            - sh
            - '-c'
            - >-
              chmod 0700 -R /data/pgdata || true;
              /bin/ash /data/create-pgpass.sh;
              chmod 0600 /data/.pgpass;
          env:
          {{- $rolesSecret := .Values.citus.secrets.citusSecrets.rolesSecret }}
          {{- range $k, $v := .Values.citus.secrets.citusRolesSecrets }}
          {{- $valPass := (print $v "_pass") }}
          {{- $keyPass := (print $k "Pass") }}
          - name: {{ $valPass }}
            valueFrom:
              secretKeyRef:
                name: {{ $rolesSecret }}
                key: {{ $keyPass }}
          {{- end }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.masterReplica.containers.env.pgsecret_name }}
                key: {{ .Values.masterReplica.containers.env.pgsecret_key }}
          volumeMounts:
            - name: {{ .Values.masterReplica.volumes.name }}
              mountPath: /data
            - name: pgpass
              mountPath: /data/create-pgpass.sh
              subPath: create-pgpass.sh
      containers:
      - name: {{ .Values.master.containers.name }}
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
        image: {{ template "imageRegistry" . -}} {{ .Values.master.containers.image }}
        imagePullPolicy: IfNotPresent
        command: ["docker-entrypoint.sh", "-c", "config_file=/etc/postgresql/postgresql.conf"]
        ports:
        - containerPort: {{ .Values.master.containers.port }}
        env:
        - name: PGDATA
          value: {{ .Values.master.containers.env.pgdata_value }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.master.containers.env.pgsecret_name }}
              key: {{ .Values.master.containers.env.pgsecret_key }}
        - name: PGTZ
          value: {{ .Values.database.timezone }}
        - name: PGPASSFILE
          value: {{ .Values.citus.pgpassEnvVariable }}
        volumeMounts:
        - name: {{ .Values.master.containers.volumeMounts.name }}
          mountPath: {{ .Values.master.containers.volumeMounts.mountPath }}
        - name: pg-conf
          mountPath: /etc/postgresql
        livenessProbe:
          exec:
            command:
            - ./pg_healthcheck
          initialDelaySeconds: 60
      securityContext:
        runAsUser: {{ .Values.citus.securityContext.runAsUser }}
        fsGroup: {{ .Values.citus.securityContext.fsGroup }}
      serviceAccountName: {{ .Values.citus.serviceAccountName }}
      volumes:
        - name: {{ .Values.master.volumes.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.master.volumes.claimName }}
        - name: pg-conf
          configMap:
            name: pgconfig
        - name: pgpass
          configMap:
            name: pgpass
        - name: citus-create-roles
          configMap:
            name: citus-create-roles