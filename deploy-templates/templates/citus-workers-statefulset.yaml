apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.workers.containers.node_name }}
  labels:
    app: {{ .Values.workers.name }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.workers.name }}
  serviceName: {{ .Values.workers.name }}
  replicas: {{ .Values.workers.replicas }}
  template:
    metadata:
      annotations:
        backup.velero.io/backup-volumes: {{ .Values.workers.volumes.name }}
        sidecar.istio.io/inject: "false"
      labels:
        app: {{ .Values.workers.name }}
    spec:
      initContainers:
        - name: init-chown-data
          image: {{ template "imageRegistry" . -}} busybox
          command:
            - sh
            - '-c'
            - >-
              chmod 0700 -R /data/pgdata || true;
              while ! nc -w 1 {{ .Values.master.name }} {{ .Values.master.containers.port }} </dev/null; do echo waiting for master; sleep 10; done;
          volumeMounts:
            - name: {{ .Values.workers.volumes.name }}
              mountPath: /data
      containers:
      - name: {{ .Values.workers.containers.node_name }}
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
        image: {{ template "imageRegistry" . -}} {{ .Values.workers.containers.image }}
        imagePullPolicy: IfNotPresent
        command: [ "docker-entrypoint.sh", "-c", "config_file=/etc/postgresql/postgresql.conf" ]
        ports:
        - containerPort: {{ .Values.workers.containers.port }}
        env:
        {{- $rolesSecret := .Values.citus.secrets.citusSecrets.rolesSecret }}
        {{- range $k, $v := .Values.citus.secrets.citusRolesSecrets }}
          {{- $valPass := (print $v "_pass") }}
          {{- $keyPass := (print $k "Pass") }}
        - name: {{ $valPass }}
          valueFrom:
            secretKeyRef:
              name: {{ $rolesSecret }}
              key: {{ $keyPass }}
        {{- end }}
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.workers.containers.env.pgsecret_name }}
              key: {{ .Values.workers.containers.env.pgsecret_key }}
        - name: PGDATA
          value: {{ .Values.workers.containers.env.pgdata_value }}
        - name: PGPASSFILE
          value: {{ .Values.citus.pgpassEnvVariable }}
        volumeMounts:
        - name: {{ .Values.workers.containers.volumeMounts.name }}
          mountPath: {{ .Values.workers.containers.volumeMounts.mountPath }}
        - name: pg-conf
          mountPath: /etc/postgresql
        - name: pgpass
          mountPath: /docker-entrypoint-initdb.d/002-create-pgpass.sh
          subPath: 002-create-pgpass.sh
        livenessProbe:
          exec:
            command:
            - ./pg_healthcheck
          initialDelaySeconds: 60
      - name: {{ .Values.workers.containers.node_name }}-sidecar
        image: {{ template "imageRegistry" . -}} {{ .Values.workers.containers.image }}
        imagePullPolicy: IfNotPresent
        command:
          - 'sh'
          - '-c'
          - | 
            while ! ./pg_healthcheck; do echo pg not ready; sleep 20; done ; psql --host={{ .Values.master.name }} --username=${PSQL_USER} --command="SELECT * from master_add_node('${HOSTNAME}.{{ .Values.workers.name }}', {{ .Values.workers.containers.port }});" ; while true; do trap : TERM INT; sleep 9999999999d & wait ; done
        ports:
        - containerPort: {{ .Values.workers.containers.port }}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PSQL_USER  
          valueFrom:
            secretKeyRef:
              name: {{ .Values.workers.containers.env.pgsecret_name }}
              key: {{ .Values.master.containers.env.user_name }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.workers.containers.env.pgsecret_name }}
              key: {{ .Values.workers.containers.env.pgsecret_key }}
        - name: PGDATA
          value: {{ .Values.workers.containers.env.pgdata_value }}
      securityContext:
        runAsUser: {{ .Values.citus.securityContext.runAsUser }}
        fsGroup: {{ .Values.citus.securityContext.fsGroup }}
      serviceAccountName: {{ .Values.citus.serviceAccountName }}
      volumes:
        - name: pg-conf
          configMap:
            name: pgconfig
        - name: pgpass
          configMap:
            name: pgpass
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.workers.volumes.name }}
    spec:
      storageClassName: {{ .Values.storageClass }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.workers.volumes.size }}